using SPGenerator.DataModel;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using SPGenerator.DAL.Meta;

namespace SPGenerator.DAL
{
    public partial class SqlDatabase : IDatabase
    {
        public SqlDatabase(string connectionString)
        {
            ConnectionString = connectionString;
        }
        public List<DBTableInfo> GetDataBaseTables()
        {
            using (var connection = new SqlConnection(ConnectionString))
            {
                string sql = "SELECT name, schema_id FROM sys.Tables";
                sqlTableList = new List<DBTableInfo>();

                DataTable dt = ExecuteDataTable(sql, connection);
                _identityColumns = LoadIdentityColumns(connection);
                _primaryColumns = LoadPrimaryColumns(connection);
                _foreignKeyColumns = LoadForeignKeyColumns(connection);
                foreach (DataRow dr in dt.Rows)
                {
                    var tbinfo = GetTableInformation(dr[SysSchemasCols.NAME].ToString(), Convert.ToInt32(dr[SysSchemasCols.SCHEMA_ID]), connection);
                    sqlTableList.Add(tbinfo);
                }
            }

            return sqlTableList;
        }
        private DBTableInfo GetTableInformation(string tableName, int schemaId, SqlConnection connection)
        {
            string sql = $"Select * from INFORMATION_SCHEMA.COLUMNS c JOIN sys.schemas s ON c.TABLE_SCHEMA = s.name where TABLE_NAME='{tableName}' AND s.schema_id={schemaId}";
            var dt = ExecuteDataTable(sql, connection);
            var sqlTableInfo = new DBTableInfo();
            List<DBTableColumnInfo> colList = new List<DBTableColumnInfo>();

            foreach (DataRow dr in dt.Rows)
            {
                if (string.IsNullOrEmpty(sqlTableInfo.Schema))
                {
                    string tableSchema = dr.Field<string>(InformationSchemaCols.TABLE_SCHEMA).Trim();
                    if (tableSchema != string.Empty)
                    {
                        sqlTableInfo.Schema = tableSchema;
                    }
                }
                string colName = dr.Field<string>(InformationSchemaCols.COLUMN_NAME);
                var colinfo = new DBTableColumnInfo
                {
                    ColumnName = colName,
                    DataType = dr.Field<string>(InformationSchemaCols.DATA_TYPE)
                };
                if (!string.IsNullOrWhiteSpace(dr[InformationSchemaCols.CHARACTER_MAXIMUM_LENGTH]?.ToString()))
                    colinfo.CharacterMaximumLength = int.Parse(dr[InformationSchemaCols.CHARACTER_MAXIMUM_LENGTH].ToString());

                if (!string.IsNullOrWhiteSpace(dr[InformationSchemaCols.NUMERIC_PRECISION]?.ToString()))
                    colinfo.NumericPrecision = int.Parse(dr[InformationSchemaCols.NUMERIC_PRECISION].ToString());

                if (!string.IsNullOrWhiteSpace(dr[InformationSchemaCols.NUMERIC_PRECISION_RADIX]?.ToString()))
                    colinfo.NumericPrecisionRadix = int.Parse(dr[InformationSchemaCols.NUMERIC_PRECISION_RADIX].ToString());

                if (!string.IsNullOrWhiteSpace(dr[InformationSchemaCols.NUMERIC_SCALE]?.ToString()))
                    colinfo.NumericScale = int.Parse(dr[InformationSchemaCols.NUMERIC_SCALE].ToString());



                colinfo.IsIdentity = IsIdentityColumn(colName, tableName, sqlTableInfo.Schema);
                colinfo.IsAutogeneratedGuid = IsAutogeneratedGuidColumn(dr);
                colinfo.IsPrimaryKey = IsPrimaryColumn(colName, tableName, sqlTableInfo.Schema);
                colinfo.IsForeignKey = IsForeignKeyColumn(colName, tableName, sqlTableInfo.Schema);
                colinfo.Exclude = IsExcludeColumn(colinfo);

                colList.Add(colinfo);
            }

            sqlTableInfo.TableName = tableName;
            sqlTableInfo.Columns = colList;
            return sqlTableInfo;

        }

        public string ConnectionString { get; set; }

        Dictionary<string, bool> _identityColumns = new Dictionary<string, bool>();
        Dictionary<string, bool> _primaryColumns = new Dictionary<string, bool>();
        Dictionary<string, bool> _foreignKeyColumns = new Dictionary<string, bool>();
        List<DBTableInfo> sqlTableList = null;

        private DataTable ExecuteDataTable(string sql, SqlConnection connection)
        {
            var dataTable = new DataTable();
            var command = new SqlCommand(sql);
            command.Connection = connection;
            SqlDataAdapter dataAdapter = new SqlDataAdapter(command);
            dataAdapter.Fill(dataTable);
            return dataTable;
        }

        private bool IsExcludeColumn(DBTableColumnInfo colInfo)
        {
            return colInfo.IsIdentity
                    || colInfo.IsAutogeneratedGuid
                    || colInfo.DataType.ToUpperInvariant() == "TIMESTAMP"
                    || colInfo.DataType.ToUpperInvariant() == "DATETIME" && colInfo.ColumnName.ToUpperInvariant() == "CREATIONDATE"; //autogenerated by convention
        }

        private bool IsAutogeneratedGuidColumn(DataRow columnDataRow)
        {
            var defaultValueFunctionName = columnDataRow.Field<string>(InformationSchemaCols.COLUMN_DEFAULT); //[InformationSchemaCols.COLUMN_DEFAULT];
            if (defaultValueFunctionName == null)
                return false;
            return defaultValueFunctionName.Contains("newid()") || defaultValueFunctionName.Contains("newsequentialid()");
        }

        private bool IsIdentityColumn(string columnName, string tableName, string schema)
        {
            return _identityColumns.ContainsKey(GetColumnIdentifier(schema, tableName, columnName));
        }

        private bool IsPrimaryColumn(string columnName, string tableName, string schema)
        {
            return _primaryColumns.ContainsKey(GetColumnIdentifier(schema, tableName, columnName));
        }

        private bool IsForeignKeyColumn(string columnName, string tableName, string schema)
        {
            return _foreignKeyColumns.ContainsKey(GetColumnIdentifier(schema, tableName, columnName));
        }

        private Dictionary<string, bool> LoadIdentityColumns(SqlConnection connection)
        {
            string sql = "select COLUMN_NAME, TABLE_NAME, TABLE_SCHEMA from INFORMATION_SCHEMA.COLUMNS where COLUMNPROPERTY(object_id(TABLE_SCHEMA+'.'+TABLE_NAME), COLUMN_NAME, 'IsIdentity') = 1 order by TABLE_NAME";
            Dictionary<string, bool> dic = new Dictionary<string, bool>();
            var dt = ExecuteDataTable(sql, connection);
            foreach (DataRow dr in dt.Rows)
            {
                dic[GetColumnIdentifier(dr)] = true;
            }
            return dic;
        }

        private Dictionary<string, bool> LoadPrimaryColumns(SqlConnection connection)
        {
            //string sql = "select COLUMN_NAME, TABLE_NAME from INFORMATION_SCHEMA.COLUMNS where TABLE_SCHEMA = '" + SchemaName + "' and COLUMNPROPERTY(object_id(TABLE_NAME), COLUMN_NAME, 'IsPrimaryKey') = 1 order by TABLE_NAME";
            string sql =
                "SELECT K.TABLE_NAME,K.TABLE_SCHEMA,K.COLUMN_NAME,K.CONSTRAINT_NAME FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS C JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS K ON C.TABLE_NAME = K.TABLE_NAME AND C.CONSTRAINT_CATALOG = K.CONSTRAINT_CATALOG AND C.CONSTRAINT_SCHEMA = K.CONSTRAINT_SCHEMA AND C.CONSTRAINT_NAME = K.CONSTRAINT_NAME WHERE C.CONSTRAINT_TYPE = 'PRIMARY KEY'";
            Dictionary<string, bool> dic = new Dictionary<string, bool>();
            var dt = ExecuteDataTable(sql, connection);
            foreach (DataRow dr in dt.Rows)
            {
                dic[GetColumnIdentifier(dr)] = true;
            }
            return dic;
        }

        private Dictionary<string, bool> LoadForeignKeyColumns(SqlConnection connection)
        {
            string sql =
                "SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS RC JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE KCU1 ON KCU1.CONSTRAINT_CATALOG = RC.CONSTRAINT_CATALOG AND KCU1.CONSTRAINT_SCHEMA = RC.CONSTRAINT_SCHEMA AND KCU1.CONSTRAINT_NAME = RC.CONSTRAINT_NAME";
            Dictionary<string, bool> dic = new Dictionary<string, bool>();
            var dt = ExecuteDataTable(sql, connection);
            foreach (DataRow dr in dt.Rows)
            {
                dic[GetColumnIdentifier(dr)] = true;
            }
            return dic;
        }

        private static string GetColumnIdentifier(DataRow dr)
        {
            return GetColumnIdentifier(dr.Field<string>(InformationSchemaCols.TABLE_SCHEMA),
                dr.Field<string>(InformationSchemaCols.TABLE_NAME), dr.Field<string>(InformationSchemaCols.COLUMN_NAME));
        }

        private static string GetColumnIdentifier(string tableSchema, string tableName, string columnName)
        {
            return $"{tableSchema}.{tableName}.{columnName}".ToUpperInvariant();
        }
    }
}
